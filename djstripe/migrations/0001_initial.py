# -*- coding: utf-8 -*-
# Generated by Django 1.11.20 on 2019-03-06 20:26
from __future__ import unicode_literals

import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import djstripe.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Charge',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('amount', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='Amount charged.', max_digits=8)),
                ('amount_refunded', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='Amount refunded (can be less than the amount attribute on the charge if a partial refund was issued).', max_digits=8)),
                ('captured', djstripe.fields.StripeBooleanField(default=False, help_text='If the charge was created without capturing, this boolean represents whether or not it is still uncaptured or has since been captured.')),
                ('currency', djstripe.fields.StripeCharField(help_text='Three-letter ISO currency code representing the currency in which the charge was made.', max_length=3)),
                ('failure_code', djstripe.fields.StripeCharField(choices=[('card_declined', 'Card was declined'), ('expired_card', 'Expired card'), ('incorrect_cvc', 'Incorrect security code'), ('incorrect_number', 'Incorrect number'), ('incorrect_zip', 'ZIP code failed validation'), ('invalid_cvc', 'Invalid security code'), ('invalid_expiry_month', 'Invalid expiration month'), ('invalid_expiry_year', 'Invalid expiration year'), ('invalid_number', 'Invalid number'), ('invalid_swipe_data', 'Invalid swipe data'), ('missing', 'No card being charged'), ('processing_error', 'Processing error')], help_text='Error code explaining reason for charge failure if available.', max_length=30, null=True)),
                ('failure_message', djstripe.fields.StripeTextField(help_text='Message to user further explaining reason for charge failure if available.', null=True)),
                ('fraud_details', djstripe.fields.StripeJSONField(help_text='Hash with information on fraud assessments for the charge.')),
                ('outcome', djstripe.fields.StripeJSONField(help_text='Details about whether or not the payment was accepted, and why.')),
                ('paid', djstripe.fields.StripeBooleanField(default=False, help_text='True if the charge succeeded, or was successfully authorized for later capture, False otherwise.')),
                ('receipt_email', djstripe.fields.StripeCharField(help_text='The email address that the receipt for this charge was sent to.', max_length=800, null=True)),
                ('receipt_number', djstripe.fields.StripeCharField(help_text='The transaction number that appears on email receipts sent for this charge.', max_length=9, null=True)),
                ('refunded', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.')),
                ('shipping', djstripe.fields.StripeJSONField(help_text='Shipping information for the charge', null=True)),
                ('statement_descriptor', djstripe.fields.StripeCharField(help_text='An arbitrary string to be displayed on your customer\'s credit card statement. The statement description may not include <>"\' characters, and will appear on your customer\'s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.', max_length=22, null=True)),
                ('status', djstripe.fields.StripeCharField(choices=[('failed', 'Failed'), ('pending', 'Pending'), ('succeeded', 'Succeeded')], help_text='The status of the payment.', max_length=10)),
                ('fee', djstripe.fields.StripeCurrencyField(decimal_places=2, max_digits=8, null=True)),
                ('fee_details', djstripe.fields.StripeJSONField(null=True)),
                ('source_type', djstripe.fields.StripeCharField(choices=[('alipay_account', 'Alipay account'), ('bank_account', 'Bank account'), ('bitcoin_receiver', 'Bitcoin receiver'), ('card', 'Card')], help_text='The payment source type. If the payment source is supported by dj-stripe, a corresponding model is attached to this Charge via a foreign key matching this field.', max_length=20, null=True)),
                ('source_stripe_id', djstripe.fields.StripeIdField(help_text='The payment source id.', max_length=255, null=True)),
                ('disputed', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not this charge is disputed.')),
                ('fraudulent', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not this charge was marked as fraudulent.')),
                ('receipt_sent', models.BooleanField(default=False, help_text='Whether or not a receipt was sent for this charge.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Coupon',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=500)),
                ('amount_off', djstripe.fields.StripeCurrencyField(blank=True, decimal_places=2, help_text='Amount that will be taken off the subtotal of any invoices for this customer.', max_digits=8, null=True)),
                ('currency', djstripe.fields.StripeCharField(blank=True, help_text='Three-letter ISO currency code', max_length=3, null=True)),
                ('duration', djstripe.fields.StripeCharField(choices=[('forever', 'Forever'), ('once', 'Once'), ('repeating', 'Multi-month')], help_text='Describes how long a customer who applies this coupon will get the discount.', max_length=9)),
                ('duration_in_months', djstripe.fields.StripePositiveIntegerField(blank=True, help_text='If `duration` is `repeating`, the number of months the coupon applies.', null=True)),
                ('max_redemptions', djstripe.fields.StripePositiveIntegerField(blank=True, help_text='Maximum number of times this coupon can be redeemed, in total, before it is no longer valid.', null=True)),
                ('percent_off', djstripe.fields.StripePositiveIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(1), django.core.validators.MaxValueValidator(100)])),
                ('redeem_by', djstripe.fields.StripeDateTimeField(blank=True, help_text='Date after which the coupon can no longer be redeemed. Max 5 years in the future.', null=True)),
                ('times_redeemed', djstripe.fields.StripePositiveIntegerField(default=0, editable=False, help_text='Number of times this coupon has been applied to a customer.')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Customer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('account_balance', djstripe.fields.StripeIntegerField(help_text='Current balance, if any, being stored on the customer’s account. If negative, the customer has credit to apply to the next invoice. If positive, the customer has an amount owed that will be added to thenext invoice. The balance does not refer to any unpaid invoices; it solely takes into account amounts that have yet to be successfullyapplied to any invoice. This balance is only taken into account for recurring billing purposes (i.e., subscriptions, invoices, invoice items).')),
                ('business_vat_id', djstripe.fields.StripeCharField(help_text="The customer's VAT identification number.", max_length=20, null=True)),
                ('currency', djstripe.fields.StripeCharField(help_text='The currency the customer can be charged in for recurring billing purposes (subscriptions, invoices, invoice items).', max_length=3, null=True)),
                ('delinquent', djstripe.fields.StripeBooleanField(help_text="Whether or not the latest charge for the customer's latest invoice has failed.")),
                ('email', djstripe.fields.StripeTextField(null=True)),
                ('shipping', djstripe.fields.StripeJSONField(help_text='Shipping information associated with the customer.', null=True)),
                ('date_purged', models.DateTimeField(editable=False, null=True)),
                ('coupon_start', djstripe.fields.StripeDateTimeField(editable=False, help_text='If a coupon is present, the date at which it was applied.', null=True)),
                ('coupon_end', djstripe.fields.StripeDateTimeField(editable=False, help_text='If a coupon is present and has a limited duration, the date that the discount will end.', null=True)),
                ('coupon', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='djstripe.Coupon')),
            ],
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('type', djstripe.fields.StripeCharField(help_text="Stripe's event description code", max_length=250)),
                ('request_id', djstripe.fields.StripeCharField(blank=True, help_text="Information about the request that triggered this event, for traceability purposes. If empty string then this is an old entry without that data. If Null then this is not an old entry, but a Stripe 'automated' event with no associated request.", max_length=50, null=True)),
                ('idempotency_key', djstripe.fields.StripeTextField(blank=True, null=True)),
                ('received_api_version', djstripe.fields.StripeCharField(blank=True, help_text='the API version at which the event data was rendered. Blank for old entries only, all new entries will have this value', max_length=15)),
                ('webhook_message', djstripe.fields.StripeJSONField(help_text='data received at webhook. data should be considered to be garbage until validity check is run and valid flag is set')),
                ('valid', models.NullBooleanField(help_text='Tri-state bool. Null == validity not yet confirmed. Otherwise, this field indicates that this event was checked via stripe api and found to be either authentic (valid=True) or in-authentic (possibly malicious)')),
                ('processed', models.BooleanField(default=False, help_text='If validity is performed, webhook event processor(s) may run to take further action on the event. Once these have run, this is set to True.')),
                ('customer', models.ForeignKey(help_text='In the event that there is a related customer, this will point to that Customer record', null=True, on_delete=django.db.models.deletion.CASCADE, to='djstripe.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='EventProcessingException',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('data', models.TextField()),
                ('message', models.CharField(max_length=500)),
                ('traceback', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('event', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='djstripe.Event')),
            ],
        ),
        migrations.CreateModel(
            name='IdempotencyKey',
            fields=[
                ('uuid', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=100)),
                ('livemode', models.BooleanField(help_text='Whether the key was used in live or test mode.')),
                ('created', models.DateTimeField(auto_now_add=True)),
            ],
        ),
        migrations.CreateModel(
            name='Invoice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('amount_due', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text="Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the amount_due may be 0. If there is a positive starting_balance for the invoice (the customer owes money), the amount_due will also take that into account. The charge that gets generated for the invoice will be for the amount specified in amount_due.", max_digits=8)),
                ('application_fee', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text="The fee in cents that will be applied to the invoice and transferred to the application owner's Stripe account when the invoice is paid.", max_digits=8, null=True)),
                ('attempt_count', djstripe.fields.StripeIntegerField(help_text='Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule.')),
                ('attempted', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the ``invoice.created`` webhook, for example, so you might not want to display that invoice as unpaid to your users.')),
                ('closed', djstripe.fields.StripeBooleanField(default=False, help_text="Whether or not the invoice is still trying to collect payment. An invoice is closed if it's either paid or it has been marked closed. A closed invoice will no longer attempt to collect payment.")),
                ('currency', djstripe.fields.StripeCharField(help_text='Three-letter ISO currency code.', max_length=3)),
                ('date', djstripe.fields.StripeDateTimeField(help_text='The date on the invoice.')),
                ('ending_balance', djstripe.fields.StripeIntegerField(help_text='Ending customer balance after attempting to pay invoice. If the invoice has not been attempted yet, this will be null.', null=True)),
                ('forgiven', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not the invoice has been forgiven. Forgiving an invoice instructs us to update the subscription status as if the invoice were successfully paid. Once an invoice has been forgiven, it cannot be unforgiven or reopened.')),
                ('next_payment_attempt', djstripe.fields.StripeDateTimeField(help_text='The time at which payment will next be attempted.', null=True)),
                ('paid', djstripe.fields.StripeBooleanField(default=False, help_text='The time at which payment will next be attempted.')),
                ('period_end', djstripe.fields.StripeDateTimeField(help_text='End of the usage period during which invoice items were added to this invoice.')),
                ('period_start', djstripe.fields.StripeDateTimeField(help_text='Start of the usage period during which invoice items were added to this invoice.')),
                ('starting_balance', djstripe.fields.StripeIntegerField(help_text='Starting customer balance before attempting to pay invoice. If the invoice has not been attempted yet, this will be the current customer balance.')),
                ('statement_descriptor', djstripe.fields.StripeCharField(help_text='An arbitrary string to be displayed on your customer\'s credit card statement. The statement description may not include <>"\' characters, and will appear on your customer\'s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.', max_length=22, null=True)),
                ('subscription_proration_date', djstripe.fields.StripeDateTimeField(help_text='Only set for upcoming invoices that preview prorations. The time used to calculate prorations.', null=True)),
                ('subtotal', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='Only set for upcoming invoices that preview prorations. The time used to calculate prorations.', max_digits=8)),
                ('tax', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='The amount of tax included in the total, calculated from ``tax_percent`` and the subtotal. If no ``tax_percent`` is defined, this value will be null.', max_digits=8, null=True)),
                ('tax_percent', djstripe.fields.StripePercentField(decimal_places=2, help_text="This percentage of the subtotal has been added to the total amount of the invoice, including invoice line items and discounts. This field is inherited from the subscription's ``tax_percent`` field, but can be changed before the invoice is paid. This field defaults to null.", max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(100.0)])),
                ('total', djstripe.fields.StripeCurrencyField(decimal_places=2, max_digits=8, verbose_name='Total after discount.')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='InvoiceItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('amount', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='Amount invoiced.', max_digits=8)),
                ('currency', djstripe.fields.StripeCharField(help_text='Three-letter ISO currency code.', max_length=3)),
                ('date', djstripe.fields.StripeDateTimeField(help_text='The date on the invoiceitem.')),
                ('discountable', djstripe.fields.StripeBooleanField(default=False, help_text='If True, discounts will apply to this invoice item. Always False for prorations.')),
                ('period_end', djstripe.fields.StripeDateTimeField(help_text="Might be the date when this invoiceitem's invoice was sent.")),
                ('period_start', djstripe.fields.StripeDateTimeField(help_text='Might be the date when this invoiceitem was added to the invoice')),
                ('proration', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not the invoice item was created automatically as a proration adjustment when the customer switched plans.')),
                ('quantity', djstripe.fields.StripeIntegerField(help_text='If the invoice item is a proration, the quantity of the subscription for which the proration was computed.', null=True)),
                ('customer', models.ForeignKey(help_text='The customer associated with this invoiceitem.', on_delete=django.db.models.deletion.CASCADE, related_name='invoiceitems', to='djstripe.Customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Payout',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('amount', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='Amount to be transferred to your bank account or debit card.', max_digits=8)),
                ('arrival_date', djstripe.fields.StripeDateTimeField(help_text='Date the payout is expected to arrive in the bank. This factors in delays like weekends or bank holidays.')),
                ('currency', djstripe.fields.StripeCharField(help_text='Three-letter ISO currency code.', max_length=3)),
                ('failure_code', djstripe.fields.StripeCharField(blank=True, choices=[('account_closed', 'Bank account has been closed.'), ('account_frozen', 'Bank account has been frozen.'), ('bank_account_restricted', 'Bank account has restrictions on payouts allowed.'), ('bank_ownership_changed', 'Destination bank account has changed ownership.'), ('could_not_process', 'Bank could not process payout.'), ('debit_not_authorized', 'Debit transactions not approved on the bank account.'), ('insufficient_funds', 'Stripe account has insufficient funds.'), ('invalid_account_number', 'Invalid account number'), ('invalid_currency', 'Bank account does not support currency.'), ('no_account', 'Bank account could not be located.'), ('unsupported_card', 'Card no longer supported.')], help_text='Error code explaining reason for transfer failure if available. See https://stripe.com/docs/api/python#transfer_failures.', max_length=23, null=True)),
                ('failure_message', djstripe.fields.StripeTextField(blank=True, help_text='Message to user further explaining reason for payout failure if available.', null=True)),
                ('method', djstripe.fields.StripeCharField(choices=[('instant', 'Instant'), ('standard', 'Standard')], help_text='The method used to send this payout. `instant` is only supported for payouts to debit cards.', max_length=8)),
                ('statement_descriptor', djstripe.fields.StripeCharField(blank=True, help_text='Extra information about a payout to be displayed on the user’s bank statement.', max_length=255, null=True)),
                ('status', djstripe.fields.StripeCharField(choices=[('canceled', 'Canceled'), ('failed', 'Failed'), ('in_transit', 'In transit'), ('paid', 'Paid'), ('pending', 'Pending')], help_text='Current status of the payout. A payout will be `pending` until it is submitted to the bank, at which point it becomes `in_transit`. I t will then change to paid if the transaction goes through. If it does not go through successfully, its status will change to `failed` or `canceled`.', max_length=10)),
                ('type', djstripe.fields.StripeCharField(choices=[('bank_account', 'Bank account'), ('card', 'Card')], max_length=12)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Plan',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('amount', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='Amount to be charged on the interval specified.', max_digits=8)),
                ('currency', djstripe.fields.StripeCharField(help_text='Three-letter ISO currency code', max_length=3)),
                ('interval', djstripe.fields.StripeCharField(choices=[('day', 'Day'), ('month', 'Month'), ('week', 'Week'), ('year', 'Year')], help_text='The frequency with which a subscription should be billed.', max_length=5)),
                ('interval_count', djstripe.fields.StripeIntegerField(help_text='The number of intervals (specified in the interval property) between each subscription billing.', null=True)),
                ('name', djstripe.fields.StripeTextField(help_text='Name of the plan, to be displayed on invoices and in the web interface.')),
                ('statement_descriptor', djstripe.fields.StripeCharField(help_text='An arbitrary string to be displayed on your customer\'s credit card statement. The statement description may not include <>"\' characters, and will appear on your customer\'s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.', max_length=22, null=True)),
                ('trial_period_days', djstripe.fields.StripeIntegerField(help_text='Number of trial period days granted when subscribing a customer to this plan. Null if the plan has no trial period.', null=True)),
            ],
            options={
                'ordering': ['amount'],
            },
        ),
        migrations.CreateModel(
            name='StripeSource',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Subscription',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('application_fee_percent', djstripe.fields.StripePercentField(decimal_places=2, help_text="A positive decimal that represents the fee percentage of the subscription invoice amount that will be transferred to the application owner's Stripe account each billing period.", max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(100.0)])),
                ('cancel_at_period_end', djstripe.fields.StripeBooleanField(default=False, help_text='If the subscription has been canceled with the ``at_period_end`` flag set to true, ``cancel_at_period_end`` on the subscription will be true. You can use this attribute to determine whether a subscription that has a status of active is scheduled to be canceled at the end of the current period.')),
                ('canceled_at', djstripe.fields.StripeDateTimeField(help_text='If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with ``cancel_at_period_end``, canceled_at will still reflect the date of the initial cancellation request, not the end of the subscription period when the subscription is automatically moved to a canceled state.', null=True)),
                ('current_period_end', djstripe.fields.StripeDateTimeField(help_text='End of the current period for which the subscription has been invoiced. At the end of this period, a new invoice will be created.')),
                ('current_period_start', djstripe.fields.StripeDateTimeField(help_text='Start of the current period for which the subscription has been invoiced.')),
                ('ended_at', djstripe.fields.StripeDateTimeField(help_text='If the subscription has ended (either because it was canceled or because the customer was switched to a subscription to a new plan), the date the subscription ended.', null=True)),
                ('quantity', djstripe.fields.StripeIntegerField(help_text='The quantity applied to this subscription.')),
                ('start', djstripe.fields.StripeDateTimeField(help_text='Date the subscription started.')),
                ('status', djstripe.fields.StripeCharField(choices=[('active', 'Active'), ('canceled', 'Canceled'), ('past_due', 'Past due'), ('trialing', 'Trialing'), ('unpaid', 'Unpaid')], help_text='The status of this subscription.', max_length=8)),
                ('tax_percent', djstripe.fields.StripePercentField(decimal_places=2, help_text='A positive decimal (with at most two decimal places) between 1 and 100. This represents the percentage of the subscription invoice subtotal that will be calculated and added as tax to the final amount each billing period.', max_digits=5, null=True, validators=[django.core.validators.MinValueValidator(1.0), django.core.validators.MaxValueValidator(100.0)])),
                ('trial_end', djstripe.fields.StripeDateTimeField(help_text='If the subscription has a trial, the end of that trial.', null=True)),
                ('trial_start', djstripe.fields.StripeDateTimeField(help_text='If the subscription has a trial, the beginning of that trial.', null=True)),
                ('customer', models.ForeignKey(help_text='The customer associated with this subscription.', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='djstripe.Customer')),
                ('plan', models.ForeignKey(help_text='The plan associated with this subscription.', on_delete=django.db.models.deletion.CASCADE, related_name='subscriptions', to='djstripe.Plan')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Transfer',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('stripe_id', djstripe.fields.StripeIdField(max_length=255, unique=True)),
                ('livemode', djstripe.fields.StripeNullBooleanField(default=None, help_text='Null here indicates that the livemode status is unknown or was previously unrecorded. Otherwise, this field indicates whether this record comes from Stripe test mode or live mode operation.')),
                ('stripe_timestamp', djstripe.fields.StripeDateTimeField(help_text='The datetime this object was created in stripe.', null=True)),
                ('metadata', djstripe.fields.StripeJSONField(blank=True, help_text='A set of key/value pairs that you can attach to an object. It can be useful for storing additional information about an object in a structured format.', null=True)),
                ('description', djstripe.fields.StripeTextField(blank=True, help_text='A description of this object.', null=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('modified', models.DateTimeField(auto_now=True)),
                ('amount', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='The amount transferred', max_digits=8)),
                ('amount_reversed', djstripe.fields.StripeCurrencyField(decimal_places=2, help_text='The amount reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).', max_digits=8, null=True)),
                ('currency', djstripe.fields.StripeCharField(help_text='Three-letter ISO currency code.', max_length=3)),
                ('date', djstripe.fields.StripeDateTimeField(help_text="Date the transfer is scheduled to arrive in the bank. This doesn't factor in delays like weekends or bank holidays.")),
                ('destination', djstripe.fields.StripeIdField(help_text='ID of the bank account, card, or Stripe account the transfer was sent to.', max_length=255)),
                ('destination_payment', djstripe.fields.StripeIdField(help_text='If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.', max_length=255, null=True)),
                ('destination_type', djstripe.fields.StripeCharField(blank=True, choices=[('card', 'Card'), ('bank_account', 'Bank Account'), ('stripe_account', 'Stripe Account')], help_text='The type of the transfer destination.', max_length=14, null=True)),
                ('failure_code', djstripe.fields.StripeCharField(blank=True, choices=[('account_closed', 'Bank account has been closed.'), ('account_frozen', 'Bank account has been frozen.'), ('bank_account_restricted', 'Bank account has restrictions on payouts allowed.'), ('bank_ownership_changed', 'Destination bank account has changed ownership.'), ('could_not_process', 'Bank could not process payout.'), ('debit_not_authorized', 'Debit transactions not approved on the bank account.'), ('insufficient_funds', 'Stripe account has insufficient funds.'), ('invalid_account_number', 'Invalid account number'), ('invalid_currency', 'Bank account does not support currency.'), ('no_account', 'Bank account could not be located.'), ('unsupported_card', 'Card no longer supported.')], help_text='Error code explaining reason for transfer failure if available. See https://stripe.com/docs/api/python#transfer_failures.', max_length=23, null=True)),
                ('failure_message', djstripe.fields.StripeTextField(blank=True, help_text='Message to user further explaining reason for transfer failure if available.', null=True)),
                ('reversed', djstripe.fields.StripeBooleanField(default=False, help_text='Whether or not the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.')),
                ('source_transaction', djstripe.fields.StripeIdField(help_text='ID of the charge (or other transaction) that was used to fund the transfer. If null, the transfer was funded from the available balance.', max_length=255, null=True)),
                ('source_type', djstripe.fields.StripeCharField(choices=[('alipay_account', 'Alipay account'), ('bank_account', 'Bank account'), ('bitcoin_receiver', 'Bitcoin receiver'), ('card', 'Card')], help_text='The source balance from which this transfer came.', max_length=16)),
                ('statement_descriptor', djstripe.fields.StripeCharField(help_text='An arbitrary string to be displayed on your customer\'s credit card statement. The statement description may not include <>"\' characters, and will appear on your customer\'s statement in capital letters. Non-ASCII characters are automatically stripped. While most banks display this information consistently, some may display it incorrectly or not at all.', max_length=22, null=True)),
                ('status', djstripe.fields.StripeCharField(blank=True, choices=[('canceled', 'Canceled'), ('failed', 'Failed'), ('in_transit', 'In transit'), ('paid', 'Paid'), ('pending', 'Pending')], help_text='The current status of the transfer. A transfer will be pending until it is submitted to the bank, at which point it becomes in_transit. It will then change to paid if the transaction goes through. If it does not go through successfully, its status will change to failed or canceled.', max_length=10, null=True)),
                ('fee', djstripe.fields.StripeCurrencyField(decimal_places=2, max_digits=8, null=True)),
                ('fee_details', djstripe.fields.StripeJSONField(null=True)),
                ('adjustment_count', djstripe.fields.StripeIntegerField(default=None, null=True)),
                ('adjustment_fees', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('adjustment_gross', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('charge_count', djstripe.fields.StripeIntegerField(default=None, null=True)),
                ('charge_fees', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('charge_gross', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('collected_fee_count', djstripe.fields.StripeIntegerField(default=None, null=True)),
                ('collected_fee_gross', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('net', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('refund_count', djstripe.fields.StripeIntegerField(default=None, null=True)),
                ('refund_fees', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('refund_gross', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
                ('validation_count', djstripe.fields.StripeIntegerField(default=None, null=True)),
                ('validation_fees', djstripe.fields.StripeCurrencyField(decimal_places=2, default=None, max_digits=8, null=True)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Card',
            fields=[
                ('stripesource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='djstripe.StripeSource')),
                ('address_city', djstripe.fields.StripeTextField(help_text='Billing address city.', null=True)),
                ('address_country', djstripe.fields.StripeTextField(help_text='Billing address country.', null=True)),
                ('address_line1', djstripe.fields.StripeTextField(help_text='Billing address (Line 1).', null=True)),
                ('address_line1_check', djstripe.fields.StripeCharField(choices=[('fail', 'Fail'), ('pass', 'Pass'), ('unavailable', 'Unavailable'), ('unchecked', 'Unchecked')], help_text='If ``address_line1`` was provided, results of the check.', max_length=11, null=True)),
                ('address_line2', djstripe.fields.StripeTextField(help_text='Billing address (Line 2).', null=True)),
                ('address_state', djstripe.fields.StripeTextField(help_text='Billing address state.', null=True)),
                ('address_zip', djstripe.fields.StripeTextField(help_text='Billing address zip code.', null=True)),
                ('address_zip_check', djstripe.fields.StripeCharField(choices=[('fail', 'Fail'), ('pass', 'Pass'), ('unavailable', 'Unavailable'), ('unchecked', 'Unchecked')], help_text='If ``address_zip`` was provided, results of the check.', max_length=11, null=True)),
                ('brand', djstripe.fields.StripeCharField(choices=[('American Express', 'American Express'), ('Diners Club', 'Diners Club'), ('Discover', 'Discover'), ('JCB', 'JCB'), ('MasterCard', 'MasterCard'), ('Unknown', 'Unknown'), ('Visa', 'Visa')], help_text='Card brand.', max_length=16)),
                ('country', djstripe.fields.StripeCharField(help_text='Two-letter ISO code representing the country of the card.', max_length=2)),
                ('cvc_check', djstripe.fields.StripeCharField(choices=[('fail', 'Fail'), ('pass', 'Pass'), ('unavailable', 'Unavailable'), ('unchecked', 'Unchecked')], help_text='If a CVC was provided, results of the check.', max_length=11, null=True)),
                ('dynamic_last4', djstripe.fields.StripeCharField(help_text='(For tokenized numbers only.) The last four digits of the device account number.', max_length=4, null=True)),
                ('exp_month', djstripe.fields.StripeIntegerField(help_text='Card expiration month.')),
                ('exp_year', djstripe.fields.StripeIntegerField(help_text='Card expiration year.')),
                ('fingerprint', djstripe.fields.StripeTextField(help_text='Uniquely identifies this particular card number.', null=True)),
                ('funding', djstripe.fields.StripeCharField(choices=[('credit', 'Credit'), ('debit', 'Debit'), ('prepaid', 'Prepaid'), ('unknown', 'Unknown')], help_text='Card funding type.', max_length=7)),
                ('last4', djstripe.fields.StripeCharField(help_text='Last four digits of Card number.', max_length=4)),
                ('name', djstripe.fields.StripeTextField(help_text='Cardholder name.', null=True)),
                ('tokenization_method', djstripe.fields.StripeCharField(choices=[('android_pay', 'Android Pay'), ('apple_pay', 'Apple Pay')], help_text='If the card number is tokenized, this is the method that was used.', max_length=11, null=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('djstripe.stripesource',),
        ),
        migrations.CreateModel(
            name='UpcomingInvoice',
            fields=[
                ('invoice_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='djstripe.Invoice')),
            ],
            options={
                'abstract': False,
            },
            bases=('djstripe.invoice',),
        ),
        migrations.AddField(
            model_name='stripesource',
            name='customer',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='sources', to='djstripe.Customer'),
        ),
        migrations.AddField(
            model_name='stripesource',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_djstripe.stripesource_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='invoice',
            field=models.ForeignKey(help_text='The invoice to which this invoiceitem is attached.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='invoiceitems', to='djstripe.Invoice'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='plan',
            field=models.ForeignKey(help_text='If the invoice item is a proration, the plan of the subscription for which the proration was computed.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoiceitems', to='djstripe.Plan'),
        ),
        migrations.AddField(
            model_name='invoiceitem',
            name='subscription',
            field=models.ForeignKey(help_text='The subscription that this invoice item has been created for, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoiceitems', to='djstripe.Subscription'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='charge',
            field=models.OneToOneField(help_text='The latest charge generated for this invoice, if any.', null=True, on_delete=django.db.models.deletion.CASCADE, related_name='latest_invoice', to='djstripe.Charge'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='customer',
            field=models.ForeignKey(help_text='The customer associated with this invoice.', on_delete=django.db.models.deletion.CASCADE, related_name='invoices', to='djstripe.Customer'),
        ),
        migrations.AddField(
            model_name='invoice',
            name='subscription',
            field=models.ForeignKey(help_text='The subscription that this invoice was prepared for, if any.', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='invoices', to='djstripe.Subscription'),
        ),
        migrations.AlterUniqueTogether(
            name='idempotencykey',
            unique_together=set([('action', 'livemode')]),
        ),
        migrations.AddField(
            model_name='customer',
            name='default_source',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='customers', to='djstripe.StripeSource'),
        ),
    ]
